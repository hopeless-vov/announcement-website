{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","search","length","toLowerCase","title","substr","className","key","type","id","value","onChange","e","setUpdate","target","onClick","deleteItem","toggledDiv","show","description","setUpdateDescription","App","handleChange","console","log","setState","preventDefault","state","handleInputTitle","bind","handleInputDescription","addItem","this","Date","now","filteredItems","filter","newItem","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c4d7a6a0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css'\r\n\r\nfunction ListItems(props) {\r\n    \r\n    const items = props.items;\r\n  \r\n    const listItems = items.map(item => \r\n        {\r\n            if (props.search.length > 0) {\r\n\r\n                \r\n            return props.search.toLowerCase() === item.title.toLowerCase().substr(0, props.search.length) ? <div className=\"list\" key={item.key}>\r\n                    <p> \r\n                        <input  \r\n                        type=\"text\" \r\n                        id={item.key} \r\n                        value={item.title} \r\n                        onChange={(e)=>{props.setUpdate(e.target.value,item.key)}}/> \r\n                            \r\n                        <span \r\n                            className=\"delet\"\r\n                            onClick={() => props.deleteItem(item.key)}\r\n                        >x</span> \r\n                    </p> \r\n                        \r\n                     \r\n                    \r\n                    <button   onClick={props.toggledDiv}>    \r\n                        Show/Hide announcement</button>\r\n\r\n                        {props.show &&  \r\n                        <textarea type=\"text\" \r\n                        id={item.key} \r\n                        value={item.description} \r\n                        onChange={(e)=>{props.setUpdateDescription(e.target.value,item.key)}}/>\r\n                        }\r\n              \r\n                         \r\n                         \r\n              \r\n            </div> : null\r\n            \r\n            } else {\r\n                return <div className=\"list\" key={item.key}>\r\n                    <p> \r\n                        <input  \r\n                        type=\"text\" \r\n                        id={item.key} \r\n                        value={item.title} \r\n                        onChange={(e)=>{props.setUpdate(e.target.value,item.key)}}/> \r\n                            \r\n                        <span \r\n                            className=\"delet\"\r\n                            onClick={() => props.deleteItem(item.key)}\r\n                        >x</span> \r\n                    </p> \r\n                        \r\n                    <button   onClick={props.toggledDiv}>    \r\n                        Show/Hide announcement</button>\r\n\r\n                        {props.show && \r\n                        <textarea type=\"text\" \r\n                        id={item.key} \r\n                        value={item.description} \r\n                        onChange={(e)=>{props.setUpdateDescription(e.target.value,item.key)}}/>\r\n                        }\r\n              \r\n            </div>\r\n            }\r\n        })\r\n    \r\n\r\n    return(\r\n        <div>{listItems}</div>\r\n    )\r\n}\r\n\r\nexport default ListItems;\r\n","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state= {\n      items:[],\n      \n        title: '',\n        description: '',\n        key: '',\n        search: '',\n        show:false\n      \n    }\n    this.handleInputTitle = this.handleInputTitle.bind(this);\n    this.handleInputDescription = this.handleInputDescription.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    this.setUpdateDescription = this.setUpdateDescription.bind(this);\n    this.toggledDiv = this.toggledDiv.bind(this);\n     \n  }\n  handleChange = (e) => {\n    console.log(\"Hallo\", e.target.value)\n    this.setState({\n      search: e.target.value\n    })\n    \n  }\n  handleInputTitle(e) {\n    this.setState({\n\n        title: e.target.value,\n        key: Date.now(),\n       \n    })\n  }\n  handleInputDescription(e) {\n    this.setState({\n     \n        description: e.target.value,\n        key: Date.now(),\n       \n    })\n  }\n  \n  \n  setUpdate(title,key){\n    \n    const items = this.state.items;\n    items.map(item=>{      \n      if(item.key===key){\n      \n        item.title= title;\n      \n      }\n    })\n    this.setState({\n      items: items\n    })\n    \n   \n  }\n  setUpdateDescription(description,key){\n    \n    const items = this.state.items;\n    items.map(item=>{      \n      if(item.key===key){\n      \n \n        item.description= description;\n      }\n    })\n    this.setState({\n      items: items\n    })\n    \n   \n  }\n  deleteItem(key){\n    const filteredItems= this.state.items.filter(item =>\n      item.key!==key);\n    this.setState({\n      items: filteredItems\n    })\n\n  }\n  addItem(e) {\n    console.log(this.state.items)\n    e.preventDefault();\n    const newItem  = {title: this.state.title,description: this.state.description, key: this.state.key }\n    if(newItem.title !==\"\" && newItem.description !==\"\"){\n      const items = [...this.state.items, newItem];\n    this.setState({\n      items: items,\n        title:'',\n        description:'',\n        key:''\n       \n      })\n    }\n    \n  }\n  toggledDiv = (e) => {\n    e.preventDefault();\n    const {show} = {show: this.state.show, key: this.state.key }\n    this.setState({\n      show: !show ,\n      key:''\n    })\n  }\n   \n  render() {\n     \n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"announcement-form\" onSubmit={this.addItem}>\n            <input type=\"text\" placeholder=\"Enter Title\"\n              value={this.state.title}\n              onChange={this.handleInputTitle}\n            />\n            <input type=\"text\" placeholder=\"Enter Description\"\n              value={this.state.description}\n              onChange={this.handleInputDescription}\n            />\n             \n            <button type=\"submit\">Send</button>\n          </form>\n          \n            \n        \n          <form id=\"announcement-form\">\n             \n\n              <input type=\"text\" className=\"search\"\n                value={this.state.search}\n                 onChange={this.handleChange} placeholder=\"Search...\" />\n          </form>\n\n          <ListItems \n            items={this.state.items} \n            deleteItem={this.deleteItem} \n            setUpdate={this.setUpdate}\n            setUpdateDescription={this.setUpdateDescription}\n            handleChange={this.handleChange}\n            search = {this.state.search}\n            show = {this.state.show}\n            toggledDiv ={this.toggledDiv}\n          />\n           \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}